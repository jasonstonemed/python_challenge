# python_challenge

# PyBank and PyPoll Data Analysis

This README provides an overview of two sets of Python scripts for data analysis: PyBank and PyPoll. These scripts are designed to analyze financial and election data, respectively.

## PyBank Challenge

### Financial Data Analysis

The PyBank challenge script analyzes financial data from a CSV file, calculates various financial metrics, and provides a summary of the results. Here is an overview of the functionality provided by the script:

- **Total Months**: Counts and displays the total number of months in the dataset.
- **Net Total "Profit/Losses"**: Calculates and displays the net total amount of "Profit/Losses" over the entire dataset.
- **Changes in "Profit/Losses"**: Computes the changes in "Profit/Losses" from month to month and calculates the average of those changes.
- **Greatest Increase in Profits**: Identifies the month with the greatest increase in profits, along with the corresponding amount.
- **Greatest Decrease in Profits**: Identifies the month with the greatest decrease in profits, along with the corresponding amount.

### Instructions

To use the PyBank script, ensure that you have the financial data in a CSV file named `budget_data.csv`. Then, execute the script to perform the analysis.

## PyPoll Challenge

### Election Data Analysis

The PyPoll challenge script analyzes election data from a CSV file, calculates election results, and determines the winning candidate. Here is an overview of the functionality provided by the script:

- **Total Votes Counted**: Counts and displays the total number of votes cast in the election.
- **Candidate Vote Counts**: Calculates the vote count for each candidate and the percentage of votes they received.
- **Winner Determination**: Identifies the candidate with the highest vote count and declares them the winner.

### Instructions

To use the PyPoll script, ensure that you have the election data in a CSV file named `election_data.csv`. Then, execute the script to perform the analysis.

### Note

Both scripts utilize the Python `csv` module to read and process CSV data. The scripts assume that the CSV files are well-structured with appropriate headers.
